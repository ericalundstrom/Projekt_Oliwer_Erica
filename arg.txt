async function fetching() {
  const data = await d3.json("dataset/healthy_lifestyle_city_2021.json");
  return data;
}

async function CreateButtons() {
  let keys = [];
  let bigDataset = await fetching();

  let firstData = bigDataset[0];

  for (const key in firstData) {
    if (key === "City" || key === "flag" || key === "Rank") {
    } else {
      keys.push(key);
    }
  }
  let ButtonWrapper = document.createElement("div");
  ButtonWrapper.classList.add("ButtonBox");
  document.querySelector("#wrapper").append(ButtonWrapper);
  keys.forEach((d) => {
    let ButtonDom = document.createElement("button");
    ButtonDom.classList.add("button");
    let text = d.replace(/_/g, " ");
    ButtonDom.textContent = text;
    ButtonWrapper.append(ButtonDom);
    ButtonDom.addEventListener("click", (e) => {
      filterDataViz(e, d);
    });
  });
}

let currentFilterKey; // Track the currently applied filter key
function isSvgEmpty() {
  let svg = document.querySelector("svg");
  if (svg) {
    return d3.select(svg);
  } else {
    console.log("en ny svg");
    return createSvg();
  }
}

async function filterDataViz(e, key) {
  // Check if a different button is clicked, not the currently applied one
  if (key !== currentFilterKey) {
    currentFilterKey = key;
    if (!isSvgEmpty()) {
      CreateBubbles(key, false);
    } else {
      CreateBubbles(key, true);
    }
  }
}

let wSvg = 1300;
let hSvg = 300;

let hViz = 0.9 * hSvg;
let wViz = 0.9 * wSvg;
let wPadding = (wSvg - wViz) / 2;
let hPadding = (hSvg - hViz) / 2;
let margin = 1;

let gViz;
let view;

function createSvg() {
  let svg = d3
    .select("#wrapper")
    .append("svg")
    .attr("height", hSvg)
    .attr("width", wSvg);
}

async function CreateBubbles(key, value) {
  const bigDataset = await fetching();

  let svg = d3.select("svg");

  let chosenData = bigDataset.map((d) => ({
    city: d.City,
    filter: d[key],
    filterName: key,
    Rank: d.Rank,
    Sunshine_hours: d.Sunshine_hours,
    bottle_water_cost: d.bottle_water_cost,
    Obesity: d.Obesity,
    Life_expectancy: d.Life_expectancy,
    Pollution: d.Pollution,
    hours_worked: d.hours_worked,
    Happiness: d.Happiness,
    Outdoor_activities: d.Outdoor_activities,
    take_out_places: d.take_out_places,
    gym_cost: d.gym_cost,
    flag: d.flag,
  }));

  // Sort the chosenData array based on the filter value
  let sortedData = chosenData.sort((a, b) => a.filter - b.filter);

  const totalWidth = wViz - 2 * wPadding;

  // Update xScale to distribute circles evenly
  let xScale = d3
    .scaleLinear()
    .domain([0, sortedData.length - 1])
    .range([0, wViz]);

  let radiusScale = d3
    .scaleLinear()
    .domain([0, sortedData.length - 1])
    .range([4, 40]);

  // Check if there are existing bubbles
  let existingBubbles = svg.selectAll(".bubble").nodes().length > 0;

  if (value || !existingBubbles) {
    // Remove existing bubbles
    svg.selectAll(".bubble").remove();

    // Create new elements
    let gViz = svg
      .selectAll(".bubble")
      .data(sortedData)
      .enter()
      .append("g")
      .attr("class", "bubble")
      .attr(
        "transform",
        (d, i) => `translate(${xScale(i) + wPadding},${hSvg / 2})`
      )
      .on("click", (event, d) => zoom(event, d, radiusScale));

    gViz
      .append("circle")
      .attr("r", 0) // Start with radius 0 for smooth transition
      .attr("cx", 0)
      .attr("cy", 0)
      .transition()
      .duration(500) // Set the transition duration
      .attr("r", (d, i) => radiusScale(i));

    gViz
      .append("foreignObject")
      .attr("width", (d, i) => radiusScale(i) * 2)
      .attr("height", (d, i) => radiusScale(i) * 2)
      .attr("x", (d, i) => -radiusScale(i))
      .attr("y", (d, i) => -radiusScale(i))
      .html(
        (d) =>
          `        <div class="flag-image" style="background-image: url(${d.flag})">
                  <div id="info" style="opacity: 0">
                    <p id="title"> ${d.city} </p>
                    <div class="infodivs" id="Rank"> 
                      <p class="key">Rank: </p> 
                      <p id="value">${d.Rank} </p>
                    </div>
                    <!-- Other info divs here -->
                  </div>
                </div>
                `
      )
      .on("mouseover", function (event, d) {
        // Show tooltip on hover
        tooltip.style("opacity", 0.9);
      })
      .on("mousemove", function (event, d) {
        // Move tooltip to follow the mouse
        let text = key.replace(/_/g, " ");

        tooltip
          .html(` <b>${d.city}</b>, ${text}: ${d[key]}`)
          .style("left", event.pageX + 10 + "px")
          .style("top", event.pageY - 28 + "px");
      })
      .on("mouseout", function (event, d) {
        // Hide tooltip on mouseout
        tooltip.style("opacity", 0);
      })
      .on("mouseenter", function (event, d) {
        let foreign = d3.select(this);
        foreign.transition().style("transform", "scale(1.5)");

        let flagImage = d3.select(this);
        flagImage
          .style("display", "flex")
          .style("justify-content", "center")
          .style("align-items", "center");
      })
      .on("mouseleave", function (event, d) {
        let foreign = d3.select(this);
        foreign.transition().style("transform", "scale(1)");
        d3.select(this).select(".flag-image");
      });

    // Create a tooltip
    let tooltip = d3
      .select("body")
      .append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);
  } else {
    // Use force simulation for positioning existing elements
    let simulation = d3
      .forceSimulation(sortedData)
      .force("x", d3.forceX((d, i) => xScale(i) + wPadding).strength(1))
      .force("y", d3.forceY(hSvg / 2))
      .force(
        "collide",
        d3.forceCollide().radius((d, i) => radiusScale(i) + margin)
      )
      .on("tick", () => {
        svg
          .selectAll(".bubble")
          .attr("transform", (d) => `translate(${d.x},${d.y})`);
      });

    // Update existing foreignObjects using transitions
    svg
      .selectAll(".bubble")
      .select("foreignObject")
      .transition()
      .duration(500)
      .attr("width", (d, i) => radiusScale(i) * 2)
      .attr("height", (d, i) => radiusScale(i) * 2)
      .attr("x", (d, i) => -radiusScale(i))
      .attr("y", (d, i) => -radiusScale(i));
  }
}

CreateButtons();
