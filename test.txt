async function fetching() {
  const data = await d3.json("dataset/healthy_lifestyle_city_2021.json");
  return data;
}

async function createBubbleChart(property) {
  const width = 928;
  const height = width;
  const margin = 1; // to avoid clipping the root circle stroke
  const format = d3.format(",d");

  const color = d3.scaleOrdinal(d3.schemeTableau10);

  const pack = d3
    .pack()
    .size([width - margin * 2, height - margin * 2])
    .padding(3);

  const bigDataset = await fetching();

  const root = pack(
    d3.hierarchy({ children: bigDataset }).sum((d) => d[property])
  ); // Use the selected property for sizing

  const svg = d3
    .create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [-margin, -margin, width, height])
    .attr("style", "max-width: 100%; height: auto; font: 10px sans-serif;")
    .attr("text-anchor", "middle");

  const node = svg
    .append("g")
    .selectAll()
    .data(root.leaves())
    .join("g")
    .attr("transform", (d) => `translate(${d.x},${d.y})`);

  node
    .append("title")
    .text((d) => `${d.data.City}\n${format(d.value)} ${property}`);

  node
    .append("circle")
    .attr("fill-opacity", 0.7)
    .attr("fill", (d) => color(d.data.flag))
    .attr("r", (d) => d.r);

  const text = node.append("text").attr("clip-path", (d) => `circle(${d.r})`);

  text
    .selectAll()
    .data((d) => d.data.City.split(/(?=[A-Z][a-z])|\s+/g))
    .join("tspan")
    .attr("x", 0)
    .attr("y", (d, i, nodes) => `${i - nodes.length / 2 + 0.35}em`)
    .text((d) => d);

  text
    .append("tspan")
    .attr("x", 0)
    .attr(
      "y",
      (d) => `${d.data.City.split(/(?=[A-Z][a-z])|\s+/g).length / 2 + 0.35}em`
    )
    .attr("fill-opacity", 0.7)
    .text((d) => format(d.value));

  return Object.assign(svg.node(), { scales: { color } });
}

async function createButtons() {
  let keys = [];
  let bigDataset = await fetching();
  let firstData = bigDataset[0];

  for (const key in firstData) {
    if (key !== "City" && key !== "flag") {
      keys.push(key);
    }
  }

  let buttonWrapper = document.createElement("div");
  buttonWrapper.classList.add("ButtonBox");
  document.querySelector("body").append(buttonWrapper);

  keys.forEach((property) => {
    let buttonDom = document.createElement("button");
    buttonDom.classList.add("button");
    let text = property.replace("_", " ");
    buttonDom.textContent = text;
    buttonWrapper.append(buttonDom);
    buttonDom.addEventListener("click", (e) => {
      filterDataViz(e, property);
    });
  });
}

createButtons();

async function filterDataViz(e, property) {
  console.log(e.target.textContent);
  const chart = await createBubbleChart(property);
  document.querySelector("body").appendChild(chart);
}
